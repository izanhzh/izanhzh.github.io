<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amos&#39;s blog</title>
  
  
  <link href="https://izanhzh.github.io/atom.xml" rel="self"/>
  
  <link href="https://izanhzh.github.io/"/>
  <updated>2023-12-21T09:46:42.232Z</updated>
  <id>https://izanhzh.github.io/</id>
  
  <author>
    <name>Amos</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins基于角色的授权策略</title>
    <link href="https://izanhzh.github.io/2023/12/15/a747d13f/"/>
    <id>https://izanhzh.github.io/2023/12/15/a747d13f/</id>
    <published>2023-12-15T00:57:56.000Z</published>
    <updated>2023-12-21T09:46:42.232Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins的授权策略有非常多种，我习惯用基于角色的授权策略，这里记录下配置的一些细节。</p><blockquote><p>我使用的Jenkins版本：2.375.2</p></blockquote><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>进入插件安装页面：<code>Dashboard → Manage Jenkins → Plugin Manager → Available plugins</code>，搜索 “Role-based”，选择 <code>Role-based Authorization Strategy</code> 插件，点击 <code>Download now and install after restart</code> 进行安装。</p><p><img src="/images/posts/a747d13f/install_plugin.png" alt="安装插件"></p><h3 id="配置授权策略"><a href="#配置授权策略" class="headerlink" title="配置授权策略"></a>配置授权策略</h3><p>进入配置全局安全页面：<code>Dashboard → Manage Jenkins → Configure Global Security</code>, 修改 <code>Authorization</code> 配置，选择 <code>Role-Base Strategy</code>，点击 <code>Apply</code> 按钮应用配置。</p><p><img src="/images/posts/a747d13f/configure_global_security.png" alt="配置授权策略"></p><h3 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h3><p>插件提供了三种类型的角色。</p><table><thead><tr><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>全局角色（Global roles）</td><td>适用于管理员，可以跨越全部项目进行授权</td></tr><tr><td>项目角色（Item roles）</td><td>适用于给用户按项目分配权限的场景</td></tr><tr><td>节点角色（Agent roles）</td><td>适用于集群管理，对节点进行分配权限（<em>我还没有实践过，查资料得到的结论</em>）</td></tr></tbody></table><blockquote><p>全局角色的权限会覆盖项目角色的权限，如果一个用户给了全局权限，即使项目权限没有给，该用户也会拥有该权限。并且由于全局角色是跨越全部项目的，如果设置不得当，会让用户不受项目角色控制，可以操作全部项目。</p></blockquote><h4 id="创建全局角色"><a href="#创建全局角色" class="headerlink" title="创建全局角色"></a>创建全局角色</h4><p>进入配置页面：<code>Dashboard → Manage Jenkins → Manage and Assign Roles → Manage Roles</code>，找到 <code>Global roles</code> 配置。</p><p><img src="/images/posts/a747d13f/manage_global_roles_1.png" alt="配置全局角色步骤1"></p><p><img src="/images/posts/a747d13f/manage_global_roles_2.png" alt="配置全局角色步骤2"></p><blockquote><p>对于管理员，建议直接勾选 <code>Overall | Administer</code></p><p>对于一般的用户，希望按项目管理权限是，建议只勾选 <code>Overall | Read</code> ，其他的都不要勾选，如果不勾选 <code>Overall | Read</code>，用户登录后会显示空白页面，啥操作都做不了</p></blockquote><h4 id="创建项目角色"><a href="#创建项目角色" class="headerlink" title="创建项目角色"></a>创建项目角色</h4><p>进入配置页面：<code>Dashboard → Manage Jenkins → Manage and Assign Roles → Manage Roles</code>，找到 <code>Item roles</code> 配置。</p><p><img src="/images/posts/a747d13f/manage_item_roles_1.png" alt="配置项目角色步骤1"></p><p><img src="/images/posts/a747d13f/manage_item_roles_2.png" alt="配置项目角色步骤2"></p><h3 id="分配角色给用户"><a href="#分配角色给用户" class="headerlink" title="分配角色给用户"></a>分配角色给用户</h3><p>进入配置页面：<code>Dashboard → Manage Jenkins → Manage and Assign Roles → Assign Roles</code>。</p><p><img src="/images/posts/a747d13f/assign_roles.png" alt="分配角色给用户"></p><blockquote><p>不能只给用户分配项目角色，必须要分配一个全局角色，全局角色包含 <code>Overall | Read</code> 权限，否则用户登录后会显示空白页面，啥操作都做不了。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Jenkins的授权策略有非常多种，我习惯用基于角色的授权策略，这里记录下配置的一些细节。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我使用的Jenkins版本：2.375.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; c</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://izanhzh.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="jenkins" scheme="https://izanhzh.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>OpenIddict学习实践小结</title>
    <link href="https://izanhzh.github.io/2023/12/14/b6721e6e/"/>
    <id>https://izanhzh.github.io/2023/12/14/b6721e6e/</id>
    <published>2023-12-14T06:34:57.000Z</published>
    <updated>2023-12-22T02:57:27.246Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/openiddict/openiddict-core">Openiddict</a>开源的身份认证和授权库，可用它见OAuth 2.0/OpenID Connect功能集成到应用程序中。</p><blockquote><p>另一个流行的库是IdentityServer4，但其已另起新项目变为收费的了，旧IdentityServer4项目不再维护，Openiddict是一个很好的替代库。</p></blockquote><blockquote><p>本次学习只是简单的了解下如何将Openiddict应用到在asp.net core应用程序中，目标是搭建一个独立的身份认证服务器，为各种不同类型的客户端提供身份认证服务。本文主要记录次此学习实践的一些细节总结。</p></blockquote><blockquote><p>本次实践完整的源码地址：（ <a href="https://github.com/izanhzh/amos-learn/tree/main/OpeniddictTest">https://github.com/izanhzh/amos-learn/tree/main/OpeniddictTest</a> ）<br><font color="red">注：源码仓库未公开</font></p></blockquote><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol><li><p>创建一个asp.net core web应用项目: <code>OpeniddictTest.Server</code>，将启动地址设置为：<code>https://localhost:5001</code></p></li><li><p>主要引入的一些<code>nuget</code>包</p><table><thead><tr><th>包名</th><th>主要作用</th></tr></thead><tbody><tr><td>OpenIddict.AspNetCore</td><td>注册OpenIddict server中间件，将应用程序变成一个身份认证服务器</td></tr><tr><td>OpenIddict.EntityFrameworkCore</td><td>将OpenIddict相关的一些实体注册添加到数据库</td></tr><tr><td>OpenIddict.Quartz</td><td>参照官网例子引入的，本次实践没有深入理解，大概知道是用于自动清除过期token等</td></tr><tr><td>Microsoft.AspNetCore.Identity.UI、Microsoft.AspNetCore.Identity.EntityFrameworkCore</td><td>方便快速搭建用户账户登录等功能</td></tr></tbody></table></li><li><p>配置 <code>Startup.cs</code>  </p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Builder</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Identity</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>EntityFrameworkCore</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpenIddict<span class="token punctuation">.</span>Validation<span class="token punctuation">.</span>AspNetCore</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Quartz</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">OpenIddict<span class="token punctuation">.</span>Abstractions<span class="token punctuation">.</span>OpenIddictConstants</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Server</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Startup</span><span class="token punctuation">(</span><span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IConfiguration</span> Configuration <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment">// This method gets called by the runtime. Use this method to add services to the container.</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            services<span class="token punctuation">.</span><span class="token function">AddControllersWithViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>            <span class="token punctuation">{</span>                <span class="token comment">// Configure Entity Framework Core to use Microsoft SQL Server.</span>                options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">"Default"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Register the entity sets needed by OpenIddict.</span>                <span class="token comment">// Note: use the generic overload if you need to replace the default OpenIddict entities.</span>                options<span class="token punctuation">.</span><span class="token function">UseOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Register the Identity services.</span>            <span class="token comment">// AddIdentity时，包含了AddAuthentication(xxx).AddCookie(),定义了使用IdentityConstants.ApplicationScheme验证方案 https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityServiceCollectionExtensions.cs</span>            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddIdentity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationUser<span class="token punctuation">,</span> IdentityRole<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddEntityFrameworkStores</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">AddDefaultTokenProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">AddDefaultUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//DefaultUI要配合_LoginPartial.cshtml及endpoints.MapRazorPages()使用</span>            services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>            <span class="token punctuation">{</span>                options<span class="token punctuation">.</span><span class="token function">UseMicrosoftDependencyInjectionJobFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                options<span class="token punctuation">.</span><span class="token function">UseSimpleTypeLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                options<span class="token punctuation">.</span><span class="token function">UseInMemoryStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddQuartzHostedService</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> options<span class="token punctuation">.</span>WaitForJobsToComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// Register the OpenIddict core components.</span>              <span class="token punctuation">.</span><span class="token function">AddCore</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>              <span class="token punctuation">{</span>                  <span class="token comment">// Configure OpenIddict to use the Entity Framework Core stores and models.</span>                  <span class="token comment">// Note: call ReplaceDefaultEntities() to replace the default entities.</span>                  options<span class="token punctuation">.</span><span class="token function">UseEntityFrameworkCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// Enable Quartz.NET integration.</span>                  options<span class="token punctuation">.</span><span class="token function">UseQuartz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token comment">// Register the OpenIddict server components.</span>              <span class="token comment">// AddServer会对认证方案OpenIddictServerAspNetCoreDefaults.AuthenticationScheme进行Handle</span>              <span class="token punctuation">.</span><span class="token function">AddServer</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>              <span class="token punctuation">{</span>                  <span class="token comment">// Enable the token endpoint.</span>                  options<span class="token punctuation">.</span><span class="token function">SetAuthorizationEndpointUris</span><span class="token punctuation">(</span><span class="token string">"/connect/authorize"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  options<span class="token punctuation">.</span><span class="token function">SetLogoutEndpointUris</span><span class="token punctuation">(</span><span class="token string">"connect/logout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  options<span class="token punctuation">.</span><span class="token function">SetTokenEndpointUris</span><span class="token punctuation">(</span><span class="token string">"connect/token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  options<span class="token punctuation">.</span><span class="token function">SetUserinfoEndpointUris</span><span class="token punctuation">(</span><span class="token string">"connect/userinfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// Enable the client credentials flow.</span>                  options<span class="token punctuation">.</span><span class="token function">AllowClientCredentialsFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  options<span class="token punctuation">.</span><span class="token function">AllowAuthorizationCodeFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  options<span class="token punctuation">.</span><span class="token function">RegisterScopes</span><span class="token punctuation">(</span>Scopes<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">;</span>                  options<span class="token punctuation">.</span><span class="token function">RegisterScopes</span><span class="token punctuation">(</span>Scopes<span class="token punctuation">.</span>Profile<span class="token punctuation">)</span><span class="token punctuation">;</span>                  options<span class="token punctuation">.</span><span class="token function">RegisterScopes</span><span class="token punctuation">(</span>Scopes<span class="token punctuation">.</span>Roles<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// Register the signing and encryption credentials.</span>                  options<span class="token punctuation">.</span><span class="token function">AddDevelopmentEncryptionCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">AddDevelopmentSigningCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// Register the ASP.NET Core host and configure the ASP.NET Core options.</span>                  options<span class="token punctuation">.</span><span class="token function">UseAspNetCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">EnableAuthorizationEndpointPassthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">EnableTokenEndpointPassthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">EnableStatusCodePagesIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">EnableLogoutEndpointPassthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">EnableUserinfoEndpointPassthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动这个才会进入到自定义的connect/userinfo中</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token comment">// Register the OpenIddict validation components.</span>              <span class="token comment">// AddValidation会对认证方案OpenIddictValidationAspNetCoreDefaults.AuthenticationScheme进行Handle</span>              <span class="token punctuation">.</span><span class="token function">AddValidation</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>              <span class="token punctuation">{</span>                  <span class="token comment">// Import the configuration from the local OpenIddict server instance.</span>                  options<span class="token punctuation">.</span><span class="token function">UseLocalServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// Register the ASP.NET Core host.</span>                  options<span class="token punctuation">.</span><span class="token function">UseAspNetCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Register the worker responsible of seeding the database with the sample clients.</span>            <span class="token comment">// Note: in a real world application, this step should be part of a setup script.</span>            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHostedService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Worker<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">"/Home/Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span>                app<span class="token punctuation">.</span><span class="token function">UseHsts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Identity<span class="token punctuation">?.</span>IsAuthenticated <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>OpenIddictValidationAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>Succeeded <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>Principal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        ctx<span class="token punctuation">.</span>User <span class="token operator">=</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>            <span class="token punctuation">{</span>                endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                endpoints<span class="token punctuation">.</span><span class="token function">MapControllerRoute</span><span class="token punctuation">(</span>                    <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>                    <span class="token named-parameter punctuation">pattern</span><span class="token punctuation">:</span> <span class="token string">"{controller=Home}/{action=Index}/{id?}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                endpoints<span class="token punctuation">.</span><span class="token function">MapRazorPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>ApplicationDbContext</code>需要继承<code>IdentityDbContext</code>，并重写 <code>OnModelCreating</code> ，添加 <code>modelBuilder.UseOpenIddict()</code> 进行注册OpenIddict需要的实体 </p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IdentityDbContext<span class="token punctuation">&lt;</span>ApplicationUser<span class="token punctuation">,</span> IdentityRole<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ApplicationDbContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnConfiguring</span><span class="token punctuation">(</span>optionsBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnModelCreating</span><span class="token punctuation">(</span>modelBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelBuilder<span class="token punctuation">.</span><span class="token function">UseOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在 <code>services.AddOpenIddict().AddServer(options =&gt;xxx)</code> 中，指定了几个终结点，这些终结点是需要在项目中进行实现的（<a href="#AuthorizationController">详见后文描述</a>），当 <code>OpenIddict</code> 进行身份认证的时候会去访问这些终结点</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">options<span class="token punctuation">.</span><span class="token function">SetAuthorizationEndpointUris</span><span class="token punctuation">(</span><span class="token string">"/connect/authorize"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span><span class="token function">SetLogoutEndpointUris</span><span class="token punctuation">(</span><span class="token string">"connect/logout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span><span class="token function">SetTokenEndpointUris</span><span class="token punctuation">(</span><span class="token string">"connect/token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span><span class="token function">SetUserinfoEndpointUris</span><span class="token punctuation">(</span><span class="token string">"connect/userinfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <code>Worker</code> 用于初始化数据，参照官网资料创建一个 <code>OpenIddictApplication</code>，也就是配置需要接入的客户端，实际项目中可以用其他方式进行创建配置可以端，增加配置管理页面等</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpenIddict<span class="token punctuation">.</span>Abstractions</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">OpenIddict<span class="token punctuation">.</span>Abstractions<span class="token punctuation">.</span>OpenIddictConstants</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Server</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostedService</span></span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IServiceProvider</span> _serviceProvider<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Worker</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _serviceProvider <span class="token operator">=</span> serviceProvider<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> _serviceProvider<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreatedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> manager <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOpenIddictApplicationManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> webClient1AppDescriptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenIddictApplicationDescriptor</span>            <span class="token punctuation">{</span>                ClientId <span class="token operator">=</span> <span class="token string">"WebMvc1"</span><span class="token punctuation">,</span>                ClientSecret <span class="token operator">=</span> <span class="token string">"3C68DE8C-7195-4E1B-835E-6DDE77319419"</span><span class="token punctuation">,</span>                ConsentType <span class="token operator">=</span> ConsentTypes<span class="token punctuation">.</span>Systematic<span class="token punctuation">,</span>                DisplayName <span class="token operator">=</span> <span class="token string">"Web测试客户端1"</span><span class="token punctuation">,</span>                <span class="token comment">//只有配置了的Uri才允许回调，否则认证回调时会提示redirect_uri无效</span>                RedirectUris <span class="token operator">=</span>                <span class="token punctuation">{</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"https://localhost:5003/callback/login"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//客户端的回调地址</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"https://oauth.pstmn.io/v1/callback"</span><span class="token punctuation">)</span><span class="token comment">//支持postman进行测试回调获取token</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                PostLogoutRedirectUris <span class="token operator">=</span>                <span class="token punctuation">{</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"https://localhost:5003/callback/logout"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                Permissions <span class="token operator">=</span>                <span class="token punctuation">{</span>                    <span class="token comment">//只有配置了的Endpoints，客户端才允许访问</span>                    Permissions<span class="token punctuation">.</span>Endpoints<span class="token punctuation">.</span>Authorization<span class="token punctuation">,</span>                    Permissions<span class="token punctuation">.</span>Endpoints<span class="token punctuation">.</span>Token<span class="token punctuation">,</span>                    Permissions<span class="token punctuation">.</span>Endpoints<span class="token punctuation">.</span>Logout<span class="token punctuation">,</span>                    Permissions<span class="token punctuation">.</span>Scopes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span>                    Permissions<span class="token punctuation">.</span>Scopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>                    Permissions<span class="token punctuation">.</span>Scopes<span class="token punctuation">.</span>Roles<span class="token punctuation">,</span>                    Permissions<span class="token punctuation">.</span>GrantTypes<span class="token punctuation">.</span>ClientCredentials<span class="token punctuation">,</span>                    Permissions<span class="token punctuation">.</span>GrantTypes<span class="token punctuation">.</span>AuthorizationCode<span class="token punctuation">,</span>                    Permissions<span class="token punctuation">.</span>ResponseTypes<span class="token punctuation">.</span>Code<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                Type <span class="token operator">=</span> ClientTypes<span class="token punctuation">.</span>Confidential            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> webClient1App <span class="token operator">=</span> <span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">FindByClientIdAsync</span><span class="token punctuation">(</span>webClient1AppDescriptor<span class="token punctuation">.</span>ClientId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>webClient1App <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span>webClient1AppDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">UpdateAsync</span><span class="token punctuation">(</span>webClient1App<span class="token punctuation">,</span> webClient1AppDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">StopAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 现实中一般会存在这样的一种情况，我们系统最初不需要与外部系统做数据对接，因此也就不需要对外部系统提供身份认证服务，使用 <code>asp.net core identity</code> 就可以为我们的系统功能进行身份认证。</p><p> 但是后来出现了与外部系统数据对接的需求，某个外部系统想要调用我们的系统获取一些数据，或者外部系统想要用我们系统的用户信息登录他们的系统（类似于现在很多网站支持用微信登录），且外部系统不是本公司的，那么一般会采用 <code>OAuth2.0</code> 方案，我们不需要提供系统的账户密码给外部系统就可以完成身份认证。</p><p> 此时可以引入 <code>OpenIddict</code> 来进行 <code>OAuth2.0</code> 实现，那么就会存在这么一个问题，系统同时存在两种身份认证方案，一个是默认的 <code>identity</code> 身份认证方案，一个是 <code>OpenIddict</code> 的身份认证方案。假设某个 <code>Controller</code> 我们的系统可以调用，我们用 <code>AuthorizeAttribute</code> 特性标记了该  <code>Controller</code>，<code>AuthorizeAttribute</code> 默认不设定身份认证方案 (<code>AuthenticationSchemes</code>) 参数时，默认是按<code>identity</code> 身份认证方案进行处理的，当外部系统调用时，因为是通过 <code>OpenIddict</code> 进行身份认证的，因此会用 <code>OpenIddict</code> 的身份认证方案去获取登录凭证，而不同认证方案获取到的凭证是不能共用的，也就说此时外部系统获取到的登录凭证，还不能直接调用 <code>Controller</code>， 除非我们对 <code>Controller</code> 再指定 <code>AuthenticationSchemes</code> 参数。</p><p> 针对这种情况，我们可以在 <code>Configure</code> 中，添加下面这段代码，系统首先会判断当前请求有没有 <code>identity</code> 登录凭证，如果没有，则会再判断有没有 <code>OpenIddict</code> 的登录凭证，如果有 <code>OpenIddict</code> 的登录凭证，则将 <code>OpenIddict</code> 登录凭证的用户信息赋给 <code>identity</code> 登录凭证，这样我们的 <code>Controller</code> 就不需要做任何处理，既可以让本系统的功能用 <code>identity</code> 进行身份认证调用，也可以让外部系统用 <code>OpenIddict</code> 进行身份认证调用。</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Identity<span class="token punctuation">?.</span>IsAuthenticated <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>OpenIddictValidationAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>Succeeded <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>Principal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span>User <span class="token operator">=</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><span id="AuthorizationController">添加一个 <code>AuthorizationController</code> 实现之前配置定义的登录、注销等终结点</span></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authorization</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Http</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Identity</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Primitives</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>IdentityModel<span class="token punctuation">.</span>Tokens</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpenIddict<span class="token punctuation">.</span>Abstractions</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpenIddict<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>AspNetCore</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Helpers</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Models<span class="token punctuation">.</span>Authorization</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Immutable</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Claims</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">OpenIddict<span class="token punctuation">.</span>Abstractions<span class="token punctuation">.</span>OpenIddictConstants</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Controllers</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOpenIddictApplicationManager</span> _applicationManager<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOpenIddictAuthorizationManager</span> _authorizationManager<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOpenIddictScopeManager</span> _scopeManager<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SignInManager<span class="token punctuation">&lt;</span>ApplicationUser<span class="token punctuation">&gt;</span></span> _signInManager<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">UserManager<span class="token punctuation">&lt;</span>ApplicationUser<span class="token punctuation">&gt;</span></span> _userManager<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">AuthorizationController</span><span class="token punctuation">(</span>            <span class="token class-name">IOpenIddictApplicationManager</span> applicationManager<span class="token punctuation">,</span>            <span class="token class-name">IOpenIddictAuthorizationManager</span> authorizationManager<span class="token punctuation">,</span>            <span class="token class-name">IOpenIddictScopeManager</span> scopeManager<span class="token punctuation">,</span>            <span class="token class-name">SignInManager<span class="token punctuation">&lt;</span>ApplicationUser<span class="token punctuation">&gt;</span></span> signInManager<span class="token punctuation">,</span>            <span class="token class-name">UserManager<span class="token punctuation">&lt;</span>ApplicationUser<span class="token punctuation">&gt;</span></span> userManager<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _applicationManager <span class="token operator">=</span> applicationManager<span class="token punctuation">;</span>            _authorizationManager <span class="token operator">=</span> authorizationManager<span class="token punctuation">;</span>            _scopeManager <span class="token operator">=</span> scopeManager<span class="token punctuation">;</span>            _signInManager <span class="token operator">=</span> signInManager<span class="token punctuation">;</span>            _userManager <span class="token operator">=</span> userManager<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/connect/authorize"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/connect/authorize"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">IgnoreAntiforgeryToken</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Authorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token function">GetOpenIddictServerRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"The OpenID Connect request cannot be retrieved."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Try to retrieve the user principal stored in the authentication cookie and redirect</span>            <span class="token comment">// the user agent to the login page (or to an external provider) in the following cases:</span>            <span class="token comment">//</span>            <span class="token comment">//  - If the user principal can't be extracted or the cookie is too old.</span>            <span class="token comment">//  - If prompt=login was specified by the client application.</span>            <span class="token comment">//  - If a max_age parameter was provided and the authentication cookie is not considered "fresh" enough.</span>            <span class="token comment">//</span>            <span class="token comment">// For scenarios where the default authentication handler configured in the ASP.NET Core</span>            <span class="token comment">// authentication options shouldn't be used, a specific scheme can be specified here.</span>            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>result<span class="token punctuation">.</span>Succeeded <span class="token operator">||</span> request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>Login<span class="token punctuation">)</span> <span class="token operator">||</span>               <span class="token punctuation">(</span>request<span class="token punctuation">.</span>MaxAge <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>Properties<span class="token punctuation">?.</span>IssuedUtc <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>                DateTimeOffset<span class="token punctuation">.</span>UtcNow <span class="token operator">-</span> result<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>IssuedUtc <span class="token operator">&gt;</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>MaxAge<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// If the client application requested promptless authentication,</span>                <span class="token comment">// return an error indicating that the user is not logged in.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">Forbid</span><span class="token punctuation">(</span>                        <span class="token named-parameter punctuation">authenticationSchemes</span><span class="token punctuation">:</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>                        <span class="token punctuation">{</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Error</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> Errors<span class="token punctuation">.</span>LoginRequired<span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>ErrorDescription</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"The user is not logged in."</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// To avoid endless login -&gt; authorization redirects, the prompt=login flag</span>                <span class="token comment">// is removed from the authorization request payload before redirecting the user.</span>                <span class="token class-name"><span class="token keyword">var</span></span> prompt <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">GetPrompts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>Login<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token return-type class-name">Request<span class="token punctuation">.</span>HasFormContentType <span class="token punctuation">?</span></span>                    Request<span class="token punctuation">.</span>Form<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>parameter <span class="token operator">=&gt;</span> parameter<span class="token punctuation">.</span>Key <span class="token operator">!=</span> Parameters<span class="token punctuation">.</span>Prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                    Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>parameter <span class="token operator">=&gt;</span> parameter<span class="token punctuation">.</span>Key <span class="token operator">!=</span> Parameters<span class="token punctuation">.</span>Prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>KeyValuePair<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>Parameters<span class="token punctuation">.</span>Prompt<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringValues</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// For scenarios where the default challenge handler configured in the ASP.NET Core</span>                <span class="token comment">// authentication options shouldn't be used, a specific scheme can be specified here.</span>                <span class="token keyword">return</span> <span class="token function">Challenge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span>                <span class="token punctuation">{</span>                    RedirectUri <span class="token operator">=</span> Request<span class="token punctuation">.</span>PathBase <span class="token operator">+</span> Request<span class="token punctuation">.</span>Path <span class="token operator">+</span> QueryString<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Retrieve the profile of the logged in user.</span>            <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserAsync</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Principal<span class="token punctuation">)</span> <span class="token operator">??</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"The user details cannot be retrieved."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Retrieve the application details from the database.</span>            <span class="token class-name"><span class="token keyword">var</span></span> application <span class="token operator">=</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">FindByClientIdAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>ClientId<span class="token punctuation">)</span> <span class="token operator">??</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"Details concerning the calling client application cannot be found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Retrieve the permanent authorizations associated with the user and the calling client application.</span>            <span class="token class-name"><span class="token keyword">var</span></span> authorizations <span class="token operator">=</span> <span class="token keyword">await</span> _authorizationManager<span class="token punctuation">.</span><span class="token function">FindAsync</span><span class="token punctuation">(</span>                <span class="token named-parameter punctuation">subject</span><span class="token punctuation">:</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserIdAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token named-parameter punctuation">client</span><span class="token punctuation">:</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetIdAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token named-parameter punctuation">status</span><span class="token punctuation">:</span> Statuses<span class="token punctuation">.</span>Valid<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> AuthorizationTypes<span class="token punctuation">.</span>Permanent<span class="token punctuation">,</span><span class="token comment">//此参数用于控制登录时永久的还是临时的</span>                scopes<span class="token punctuation">:</span> request<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetConsentTypeAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// If the consent is external (e.g when authorizations are granted by a sysadmin),</span>                <span class="token comment">// immediately return an error if no authorization can be found in the database.</span>                <span class="token keyword">case</span> ConsentTypes<span class="token punctuation">.</span>External <span class="token keyword">when</span> <span class="token operator">!</span>authorizations<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token function">Forbid</span><span class="token punctuation">(</span>                        <span class="token named-parameter punctuation">authenticationSchemes</span><span class="token punctuation">:</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>                        <span class="token punctuation">{</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Error</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> Errors<span class="token punctuation">.</span>ConsentRequired<span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>ErrorDescription</span></span><span class="token punctuation">]</span> <span class="token operator">=</span>                                <span class="token string">"The logged in user is not allowed to access this client application."</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// If the consent is implicit or if an authorization was found,</span>                <span class="token comment">// return an authorization response without displaying the consent form.</span>                <span class="token keyword">case</span> ConsentTypes<span class="token punctuation">.</span>Implicit<span class="token punctuation">:</span>                <span class="token keyword">case</span> ConsentTypes<span class="token punctuation">.</span>External <span class="token keyword">when</span> authorizations<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> ConsentTypes<span class="token punctuation">.</span>Explicit <span class="token keyword">when</span> authorizations<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>Consent<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment">// Create the claims-based identity that will be used by OpenIddict to generate tokens.</span>                    <span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>                        <span class="token named-parameter punctuation">authenticationType</span><span class="token punctuation">:</span> TokenValidationParameters<span class="token punctuation">.</span>DefaultAuthenticationType<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">nameType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">roleType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Add the claims that will be persisted in the tokens.</span>                    identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Subject<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserIdAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetEmailAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserNameAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">SetClaims</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetRolesAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToImmutableArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Note: in this sample, the granted scopes match the requested scope</span>                    <span class="token comment">// but you may want to allow the user to uncheck specific scopes.</span>                    <span class="token comment">// For that, simply restrict the list of scopes before calling SetScopes.</span>                    identity<span class="token punctuation">.</span><span class="token function">SetScopes</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    identity<span class="token punctuation">.</span><span class="token function">SetResources</span><span class="token punctuation">(</span><span class="token keyword">await</span> _scopeManager<span class="token punctuation">.</span><span class="token function">ListResourcesAsync</span><span class="token punctuation">(</span>identity<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Automatically create a permanent authorization to avoid requiring explicit consent</span>                    <span class="token comment">// for future authorization or token requests containing the same scopes.</span>                    <span class="token class-name"><span class="token keyword">var</span></span> authorization <span class="token operator">=</span> authorizations<span class="token punctuation">.</span><span class="token function">LastOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    authorization <span class="token operator">??=</span> <span class="token keyword">await</span> _authorizationManager<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span>                        <span class="token named-parameter punctuation">identity</span><span class="token punctuation">:</span> identity<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">subject</span><span class="token punctuation">:</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserIdAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">client</span><span class="token punctuation">:</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetIdAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> AuthorizationTypes<span class="token punctuation">.</span>Permanent<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">scopes</span><span class="token punctuation">:</span> identity<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    identity<span class="token punctuation">.</span><span class="token function">SetAuthorizationId</span><span class="token punctuation">(</span><span class="token keyword">await</span> _authorizationManager<span class="token punctuation">.</span><span class="token function">GetIdAsync</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    identity<span class="token punctuation">.</span><span class="token function">SetDestinations</span><span class="token punctuation">(</span>GetDestinations<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">SignIn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">,</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// At this point, no authorization was found in the database and an error must be returned</span>                <span class="token comment">// if the client application specified prompt=none in the authorization request.</span>                <span class="token keyword">case</span> ConsentTypes<span class="token punctuation">.</span>Explicit <span class="token keyword">when</span> request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> ConsentTypes<span class="token punctuation">.</span>Systematic <span class="token keyword">when</span> request<span class="token punctuation">.</span><span class="token function">HasPrompt</span><span class="token punctuation">(</span>Prompts<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token function">Forbid</span><span class="token punctuation">(</span>                        <span class="token named-parameter punctuation">authenticationSchemes</span><span class="token punctuation">:</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>                        <span class="token punctuation">{</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Error</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> Errors<span class="token punctuation">.</span>ConsentRequired<span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>ErrorDescription</span></span><span class="token punctuation">]</span> <span class="token operator">=</span>                                <span class="token string">"Interactive user consent is required."</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// In every other case, render the consent form.</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthorizeViewModel</span>                    <span class="token punctuation">{</span>                        ApplicationName <span class="token operator">=</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetLocalizedDisplayNameAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">,</span>                        Scope <span class="token operator">=</span> request<span class="token punctuation">.</span>Scope                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token punctuation">,</span> <span class="token class-name">FormValueRequired</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"submit.Accept"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/connect/authorize"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">ValidateAntiForgeryToken</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token function">GetOpenIddictServerRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"The OpenID Connect request cannot be retrieved."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Retrieve the profile of the logged in user.</span>            <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserAsync</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token operator">??</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"The user details cannot be retrieved."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Retrieve the application details from the database.</span>            <span class="token class-name"><span class="token keyword">var</span></span> application <span class="token operator">=</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">FindByClientIdAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>ClientId<span class="token punctuation">)</span> <span class="token operator">??</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"Details concerning the calling client application cannot be found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Retrieve the permanent authorizations associated with the user and the calling client application.</span>            <span class="token class-name"><span class="token keyword">var</span></span> authorizations <span class="token operator">=</span> <span class="token keyword">await</span> _authorizationManager<span class="token punctuation">.</span><span class="token function">FindAsync</span><span class="token punctuation">(</span>                <span class="token named-parameter punctuation">subject</span><span class="token punctuation">:</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserIdAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token named-parameter punctuation">client</span><span class="token punctuation">:</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetIdAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token named-parameter punctuation">status</span><span class="token punctuation">:</span> Statuses<span class="token punctuation">.</span>Valid<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> AuthorizationTypes<span class="token punctuation">.</span>Permanent<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">scopes</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Note: the same check is already made in the other action but is repeated</span>            <span class="token comment">// here to ensure a malicious user can't abuse this POST-only endpoint and</span>            <span class="token comment">// force it to return a valid response without the external authorization.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorizations<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">HasConsentTypeAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> ConsentTypes<span class="token punctuation">.</span>External<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">Forbid</span><span class="token punctuation">(</span>                    <span class="token named-parameter punctuation">authenticationSchemes</span><span class="token punctuation">:</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span>                    <span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>                    <span class="token punctuation">{</span>                        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Error</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> Errors<span class="token punctuation">.</span>ConsentRequired<span class="token punctuation">,</span>                        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>ErrorDescription</span></span><span class="token punctuation">]</span> <span class="token operator">=</span>                            <span class="token string">"The logged in user is not allowed to access this client application."</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Create the claims-based identity that will be used by OpenIddict to generate tokens.</span>            <span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>                <span class="token named-parameter punctuation">authenticationType</span><span class="token punctuation">:</span> TokenValidationParameters<span class="token punctuation">.</span>DefaultAuthenticationType<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">nameType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">roleType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Add the claims that will be persisted in the tokens.</span>            identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Subject<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserIdAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetEmailAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserNameAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">SetClaims</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetRolesAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToImmutableArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Note: in this sample, the granted scopes match the requested scope</span>            <span class="token comment">// but you may want to allow the user to uncheck specific scopes.</span>            <span class="token comment">// For that, simply restrict the list of scopes before calling SetScopes.</span>            identity<span class="token punctuation">.</span><span class="token function">SetScopes</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            identity<span class="token punctuation">.</span><span class="token function">SetResources</span><span class="token punctuation">(</span><span class="token keyword">await</span> _scopeManager<span class="token punctuation">.</span><span class="token function">ListResourcesAsync</span><span class="token punctuation">(</span>identity<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Automatically create a permanent authorization to avoid requiring explicit consent</span>            <span class="token comment">// for future authorization or token requests containing the same scopes.</span>            <span class="token class-name"><span class="token keyword">var</span></span> authorization <span class="token operator">=</span> authorizations<span class="token punctuation">.</span><span class="token function">LastOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            authorization <span class="token operator">??=</span> <span class="token keyword">await</span> _authorizationManager<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span>                <span class="token named-parameter punctuation">identity</span><span class="token punctuation">:</span> identity<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">subject</span><span class="token punctuation">:</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserIdAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token named-parameter punctuation">client</span><span class="token punctuation">:</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetIdAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> AuthorizationTypes<span class="token punctuation">.</span>Permanent<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">scopes</span><span class="token punctuation">:</span> identity<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            identity<span class="token punctuation">.</span><span class="token function">SetAuthorizationId</span><span class="token punctuation">(</span><span class="token keyword">await</span> _authorizationManager<span class="token punctuation">.</span><span class="token function">GetIdAsync</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            identity<span class="token punctuation">.</span><span class="token function">SetDestinations</span><span class="token punctuation">(</span>GetDestinations<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Returning a SignInResult will ask OpenIddict to issue the appropriate access/identity tokens.</span>            <span class="token keyword">return</span> <span class="token function">SignIn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">,</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token punctuation">,</span> <span class="token class-name">FormValueRequired</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"submit.Deny"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/connect/authorize"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">ValidateAntiForgeryToken</span></span><span class="token punctuation">]</span>        <span class="token comment">// Notify OpenIddict that the authorization grant has been denied by the resource owner</span>        <span class="token comment">// to redirect the user agent to the client application using the appropriate response_mode.</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Deny</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Forbid</span><span class="token punctuation">(</span>OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/connect/logout"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ActionName</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Logout<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/connect/logout"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">ValidateAntiForgeryToken</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">LogoutPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// Ask ASP.NET Core Identity to delete the local and external cookies created</span>            <span class="token comment">// when the user agent is redirected from the external identity provider</span>            <span class="token comment">// after a successful authentication flow (e.g Google or Facebook).</span>            <span class="token keyword">await</span> _signInManager<span class="token punctuation">.</span><span class="token function">SignOutAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Returning a SignOutResult will ask OpenIddict to redirect the user agent</span>            <span class="token comment">// to the post_logout_redirect_uri specified by the client application or to</span>            <span class="token comment">// the RedirectUri specified in the authentication properties if none was set.</span>            <span class="token keyword">return</span> <span class="token function">SignOut</span><span class="token punctuation">(</span>                <span class="token named-parameter punctuation">authenticationSchemes</span><span class="token punctuation">:</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span>                <span class="token punctuation">{</span>                    RedirectUri <span class="token operator">=</span> <span class="token string">"/"</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/connect/token"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">IgnoreAntiforgeryToken</span><span class="token punctuation">,</span> <span class="token class-name">Produces</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token function">GetOpenIddictServerRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"The OpenID Connect request cannot be retrieved."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">IsAuthorizationCodeGrantType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> request<span class="token punctuation">.</span><span class="token function">IsRefreshTokenGrantType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// Retrieve the claims principal stored in the authorization code/refresh token.</span>                <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Retrieve the user profile corresponding to the authorization code/refresh token.</span>                <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">FindByIdAsync</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span><span class="token function">GetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Subject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">Forbid</span><span class="token punctuation">(</span>                        <span class="token named-parameter punctuation">authenticationSchemes</span><span class="token punctuation">:</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>                        <span class="token punctuation">{</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Error</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> Errors<span class="token punctuation">.</span>InvalidGrant<span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>ErrorDescription</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"The token is no longer valid."</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// Ensure the user is still allowed to sign in.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">await</span> _signInManager<span class="token punctuation">.</span><span class="token function">CanSignInAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">Forbid</span><span class="token punctuation">(</span>                        <span class="token named-parameter punctuation">authenticationSchemes</span><span class="token punctuation">:</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span>                        <span class="token named-parameter punctuation">properties</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>                        <span class="token punctuation">{</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Error</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> Errors<span class="token punctuation">.</span>InvalidGrant<span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictServerAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>ErrorDescription</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"The user is no longer allowed to sign in."</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>Claims<span class="token punctuation">,</span>                    <span class="token named-parameter punctuation">authenticationType</span><span class="token punctuation">:</span> TokenValidationParameters<span class="token punctuation">.</span>DefaultAuthenticationType<span class="token punctuation">,</span>                    <span class="token named-parameter punctuation">nameType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>                    <span class="token named-parameter punctuation">roleType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Override the user claims present in the principal in case they</span>                <span class="token comment">// changed since the authorization code/refresh token was issued.</span>                identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Subject<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserIdAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetEmailAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetUserNameAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">SetClaims</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">await</span> _userManager<span class="token punctuation">.</span><span class="token function">GetRolesAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToImmutableArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                identity<span class="token punctuation">.</span><span class="token function">SetDestinations</span><span class="token punctuation">(</span>GetDestinations<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Returning a SignInResult will ask OpenIddict to issue the appropriate access/identity tokens.</span>                <span class="token keyword">return</span> <span class="token function">SignIn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">,</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">IsClientCredentialsGrantType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token class-name"><span class="token keyword">var</span></span> application <span class="token operator">=</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">FindByClientIdAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>ClientId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>application <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"The application details cannot be found in the database."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// Create the claims-based identity that will be used by OpenIddict to generate tokens.</span>                <span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>                    <span class="token named-parameter punctuation">authenticationType</span><span class="token punctuation">:</span> TokenValidationParameters<span class="token punctuation">.</span>DefaultAuthenticationType<span class="token punctuation">,</span>                    <span class="token named-parameter punctuation">nameType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>                    <span class="token named-parameter punctuation">roleType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Add the claims that will be persisted in the tokens (use the client_id as the subject identifier).</span>                identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Subject<span class="token punctuation">,</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetClientIdAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">await</span> _applicationManager<span class="token punctuation">.</span><span class="token function">GetDisplayNameAsync</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Note: In the original OAuth 2.0 specification, the client credentials grant</span>                <span class="token comment">// doesn't return an identity token, which is an OpenID Connect concept.</span>                <span class="token comment">//</span>                <span class="token comment">// As a non-standardized extension, OpenIddict allows returning an id_token</span>                <span class="token comment">// to convey information about the client application when the "openid" scope</span>                <span class="token comment">// is granted (i.e specified when calling principal.SetScopes()). When the "openid"</span>                <span class="token comment">// scope is not explicitly set, no identity token is returned to the client application.</span>                <span class="token comment">// Set the list of scopes granted to the client application in access_token.</span>                identity<span class="token punctuation">.</span><span class="token function">SetScopes</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                identity<span class="token punctuation">.</span><span class="token function">SetResources</span><span class="token punctuation">(</span><span class="token keyword">await</span> _scopeManager<span class="token punctuation">.</span><span class="token function">ListResourcesAsync</span><span class="token punctuation">(</span>identity<span class="token punctuation">.</span><span class="token function">GetScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                identity<span class="token punctuation">.</span><span class="token function">SetDestinations</span><span class="token punctuation">(</span>GetDestinations<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">SignIn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">,</span> OpenIddictServerAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"The specified grant type is not supported."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetDestinations</span><span class="token punctuation">(</span><span class="token class-name">Claim</span> claim<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// Note: by default, claims are NOT automatically included in the access and identity tokens.</span>            <span class="token comment">// To allow OpenIddict to serialize them, you must attach them a destination, that specifies</span>            <span class="token comment">// whether they should be included in access tokens, in identity tokens or in both.</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>claim<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> Claims<span class="token punctuation">.</span>Name<span class="token punctuation">:</span>                    <span class="token keyword">yield</span> <span class="token keyword">return</span> Destinations<span class="token punctuation">.</span>AccessToken<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>claim<span class="token punctuation">.</span>Subject<span class="token punctuation">.</span><span class="token function">HasScope</span><span class="token punctuation">(</span>Scopes<span class="token punctuation">.</span>Profile<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">yield</span> <span class="token keyword">return</span> Destinations<span class="token punctuation">.</span>IdentityToken<span class="token punctuation">;</span>                    <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Claims<span class="token punctuation">.</span>Email<span class="token punctuation">:</span>                    <span class="token keyword">yield</span> <span class="token keyword">return</span> Destinations<span class="token punctuation">.</span>AccessToken<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>claim<span class="token punctuation">.</span>Subject<span class="token punctuation">.</span><span class="token function">HasScope</span><span class="token punctuation">(</span>Scopes<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">yield</span> <span class="token keyword">return</span> Destinations<span class="token punctuation">.</span>IdentityToken<span class="token punctuation">;</span>                    <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Claims<span class="token punctuation">.</span>Role<span class="token punctuation">:</span>                    <span class="token keyword">yield</span> <span class="token keyword">return</span> Destinations<span class="token punctuation">.</span>AccessToken<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>claim<span class="token punctuation">.</span>Subject<span class="token punctuation">.</span><span class="token function">HasScope</span><span class="token punctuation">(</span>Scopes<span class="token punctuation">.</span>Roles<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">yield</span> <span class="token keyword">return</span> Destinations<span class="token punctuation">.</span>IdentityToken<span class="token punctuation">;</span>                    <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment">// Never include the security stamp in the access and identity tokens, as it's a secret value.</span>                <span class="token keyword">case</span> <span class="token string">"AspNet.Identity.SecurityStamp"</span><span class="token punctuation">:</span> <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">yield</span> <span class="token keyword">return</span> Destinations<span class="token punctuation">.</span>AccessToken<span class="token punctuation">;</span>                    <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 <code>Authorize</code> 方法中，先判断了请求是否是 <code>OpenIddict</code> 身份认证的请求，如果是，则会用默认的身份认证方案（<code>Identity</code>）校验是否有登录，如果没有，会返回一个 <code>ChallengeResult</code> 将请求重定向用默认的身份认证方案（<code>Identity</code>）进行登录，登录完成后回调回来，重新执行一次 <code>Authorize</code> 方法，此时就有了默认的身份认证方案（<code>Identity</code>）的登录凭证了，根据这个登录凭证信息生成 <code>ClaimsPrincipal</code>，对 <code>OpenIddict</code> 身份认证方案进行SignIn操作，记录<code>OpenIddict</code> 身份认证方案的登录凭证。</p></blockquote></li><li><p>增加授权确认页面，路径：<code>Views/Authorization/Authorize.cshtml</code>，用于让用户点击确认要授权</p> <pre class="line-numbers language-cshtml" data-language="cshtml"><code class="language-cshtml"><span class="token directive"><span class="token keyword">@using</span> <span class="token csharp language-csharp">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Primitives</span></span><span class="token directive"><span class="token keyword">@using</span> <span class="token csharp language-csharp">OpeniddictTest<span class="token punctuation">.</span>Server<span class="token punctuation">.</span>Models<span class="token punctuation">.</span>Authorization</span></span><span class="token directive"><span class="token keyword">@model</span> <span class="token csharp language-csharp">AuthorizeViewModel</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jumbotron<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Authorization<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lead text-left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Do you want to grant <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Model<span class="token punctuation">.</span>ApplicationName</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span> access to your data? (scopes requested: <span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">Model<span class="token punctuation">.</span>Scope</span></span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">asp-controller</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Authorization<span class="token punctuation">"</span></span> <span class="token attr-name">asp-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Authorize<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token razor-comment comment">@* Flow the request parameters so they can be received by the Accept/Reject actions: *@</span>        <span class="token block"><span class="token keyword">@foreach</span> <span class="token csharp language-csharp"><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> parameter <span class="token keyword">in</span> Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>HasFormContentType <span class="token punctuation">?</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>KeyValuePair<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> StringValues<span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span>Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Form <span class="token punctuation">:</span> Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">parameter<span class="token punctuation">.</span>Key</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">parameter<span class="token punctuation">.</span>Value</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span></span>        <span class="token punctuation">}</span></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-lg btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit.Accept<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Yes<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-lg btn-danger<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit.Deny<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>No<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>增加注销确认页面，路径：<code>Views/Authorization/Logout.cshtml</code>，用于让用户点击确认要注销</p> <pre class="line-numbers language-cshtml" data-language="cshtml"><code class="language-cshtml"><span class="token directive"><span class="token keyword">@using</span> <span class="token csharp language-csharp">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Primitives</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jumbotron<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Log out<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lead text-left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Are you sure you want to sign out?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">asp-controller</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Authorization<span class="token punctuation">"</span></span> <span class="token attr-name">asp-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Logout<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token razor-comment comment">@* Flow the request parameters so they can be received by the LogoutPost action: *@</span>        <span class="token block"><span class="token keyword">@foreach</span> <span class="token csharp language-csharp"><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> parameter <span class="token keyword">in</span> Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>HasFormContentType <span class="token punctuation">?</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>KeyValuePair<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> StringValues<span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span>Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Form <span class="token punctuation">:</span> Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">parameter<span class="token punctuation">.</span>Key</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">parameter<span class="token punctuation">.</span>Value</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span></span>        <span class="token punctuation">}</span></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-lg btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Confirm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Yes<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="客户端（asp-net-core-mvc）"><a href="#客户端（asp-net-core-mvc）" class="headerlink" title="客户端（asp.net core mvc）"></a>客户端（asp.net core mvc）</h2><ol><li><p>创建一个asp.net core web应用项目: <code>OpeniddictTest.Web.Mvc</code> ，将启动地址设置为：<code>https://localhost:5003</code></p></li><li><p>主要引入的一些 <code>nuget</code> 包</p><table><thead><tr><th>包名</th><th>主要作用</th></tr></thead><tbody><tr><td>OpenIddict.AspNetCore</td><td>注册OpenIddict client中间件，帮助请求OpenIddict身份认证服务完成身份认证</td></tr></tbody></table></li><li><p>配置 <code>Startup.cs</code></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Cookies</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Builder</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>HttpsPolicy</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpenIddict<span class="token punctuation">.</span>Client</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">OpenIddict<span class="token punctuation">.</span>Abstractions<span class="token punctuation">.</span>OpenIddictConstants</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Startup</span><span class="token punctuation">(</span><span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IConfiguration</span> Configuration <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment">// This method gets called by the runtime. Use this method to add services to the container.</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            services<span class="token punctuation">.</span><span class="token function">AddControllersWithViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>            <span class="token punctuation">{</span>                options<span class="token punctuation">.</span>DefaultScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>             <span class="token punctuation">{</span>                 options<span class="token punctuation">.</span>LoginPath <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>                 options<span class="token punctuation">.</span>LogoutPath <span class="token operator">=</span> <span class="token string">"/logout"</span><span class="token punctuation">;</span>                 options<span class="token punctuation">.</span>ExpireTimeSpan <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 options<span class="token punctuation">.</span>SlidingExpiration <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            services<span class="token punctuation">.</span><span class="token function">AddOpenIddict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Register the OpenIddict client components.</span>                <span class="token punctuation">.</span><span class="token function">AddClient</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>                <span class="token punctuation">{</span>                    <span class="token comment">// Note: this sample uses the code flow, but you can enable the other flows if necessary.</span>                    options<span class="token punctuation">.</span><span class="token function">AllowAuthorizationCodeFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Register the signing and encryption credentials used to protect</span>                    <span class="token comment">// sensitive data like the state tokens produced by OpenIddict.</span>                    options<span class="token punctuation">.</span><span class="token function">AddDevelopmentEncryptionCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">AddDevelopmentSigningCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Register the ASP.NET Core host and configure the ASP.NET Core-specific options.</span>                    options<span class="token punctuation">.</span><span class="token function">UseAspNetCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">EnableStatusCodePagesIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">EnableRedirectionEndpointPassthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">EnablePostLogoutRedirectionEndpointPassthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Register the System.Net.Http integration and use the identity of the current</span>                    <span class="token comment">// assembly as a more specific user agent, which can be useful when dealing with</span>                    <span class="token comment">// providers that use the user agent as a way to throttle requests (e.g Reddit).</span>                    options<span class="token punctuation">.</span><span class="token function">UseSystemNetHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">SetProductInformation</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Startup</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>                    options<span class="token punctuation">.</span><span class="token function">DisableTokenStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Add a client registration matching the client application definition in the server project.</span>                    options<span class="token punctuation">.</span><span class="token function">AddRegistration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenIddictClientRegistration</span>                    <span class="token punctuation">{</span>                        Issuer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"https://localhost:5001/"</span><span class="token punctuation">,</span> UriKind<span class="token punctuation">.</span>Absolute<span class="token punctuation">)</span><span class="token punctuation">,</span>                        ClientId <span class="token operator">=</span> <span class="token string">"WebMvc1"</span><span class="token punctuation">,</span>                        ClientSecret <span class="token operator">=</span> <span class="token string">"3C68DE8C-7195-4E1B-835E-6DDE77319419"</span><span class="token punctuation">,</span>                        Scopes <span class="token operator">=</span> <span class="token punctuation">{</span> Scopes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> Scopes<span class="token punctuation">.</span>Roles<span class="token punctuation">,</span> Scopes<span class="token punctuation">.</span>Profile <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token comment">// Note: to mitigate mix-up attacks, it's recommended to use a unique redirection endpoint</span>                        <span class="token comment">// URI per provider, unless all the registered providers support returning a special "iss"</span>                        <span class="token comment">// parameter containing their URL as part of authorization responses. For more information,</span>                        <span class="token comment">// see https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#section-4.4.</span>                        RedirectUri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"callback/login"</span><span class="token punctuation">,</span> UriKind<span class="token punctuation">.</span>Relative<span class="token punctuation">)</span><span class="token punctuation">,</span>                        PostLogoutRedirectUri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"callback/logout"</span><span class="token punctuation">,</span> UriKind<span class="token punctuation">.</span>Relative<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">"/Home/Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span>                app<span class="token punctuation">.</span><span class="token function">UseHsts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>            <span class="token punctuation">{</span>                endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                endpoints<span class="token punctuation">.</span><span class="token function">MapControllerRoute</span><span class="token punctuation">(</span>                    <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>                    <span class="token named-parameter punctuation">pattern</span><span class="token punctuation">:</span> <span class="token string">"{controller=Home}/{action=Index}/{id?}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 先注册了 <code>Cookie</code> 身份认证中间件，从Cookie中获取用户登录信息，并指定登录和注销的终结点，这两个终结点是要进行实现的（<a href="#AuthenticationController">详见后文描述</a>）</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">options<span class="token punctuation">.</span>LoginPath <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>LogoutPath <span class="token operator">=</span> <span class="token string">"/logout"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 然后注册了 <code>OpenIddict</code> 客户端生成认证中间件，指定了身份认证服务器登录后回调和注销后回调的终结点，这两个终结点是要进行实现的（<a href="#AuthenticationController">详见后文描述</a>）</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">options<span class="token punctuation">.</span><span class="token function">AddRegistration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenIddictClientRegistration</span><span class="token punctuation">{</span>    Issuer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"https://localhost:5001/"</span><span class="token punctuation">,</span> UriKind<span class="token punctuation">.</span>Absolute<span class="token punctuation">)</span><span class="token punctuation">,</span>    ClientId <span class="token operator">=</span> <span class="token string">"WebMvc1"</span><span class="token punctuation">,</span>    ClientSecret <span class="token operator">=</span> <span class="token string">"3C68DE8C-7195-4E1B-835E-6DDE77319419"</span><span class="token punctuation">,</span>    Scopes <span class="token operator">=</span> <span class="token punctuation">{</span> Scopes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> Scopes<span class="token punctuation">.</span>Roles<span class="token punctuation">,</span> Scopes<span class="token punctuation">.</span>Profile <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// Note: to mitigate mix-up attacks, it's recommended to use a unique redirection endpoint</span>    <span class="token comment">// URI per provider, unless all the registered providers support returning a special "iss"</span>    <span class="token comment">// parameter containing their URL as part of authorization responses. For more information,</span>    <span class="token comment">// see https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#section-4.4.</span>    RedirectUri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"callback/login"</span><span class="token punctuation">,</span> UriKind<span class="token punctuation">.</span>Relative<span class="token punctuation">)</span><span class="token punctuation">,</span>    PostLogoutRedirectUri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"callback/logout"</span><span class="token punctuation">,</span> UriKind<span class="token punctuation">.</span>Relative<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><span id="AuthenticationController">添加一个 <code>AuthenticationController</code> 实现之前配置定义的相关终结点</span></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Cookies</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>IdentityModel<span class="token punctuation">.</span>Tokens</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpenIddict<span class="token punctuation">.</span>Abstractions</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">OpenIddict<span class="token punctuation">.</span>Client<span class="token punctuation">.</span>AspNetCore</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Claims</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">OpenIddict<span class="token punctuation">.</span>Abstractions<span class="token punctuation">.</span>OpenIddictConstants</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OpeniddictTest<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>Mvc<span class="token punctuation">.</span>Controllers</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>    <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/login"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ActionResult</span> <span class="token function">LogIn</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> returnUrl<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span>            <span class="token punctuation">{</span>                <span class="token comment">// Only allow local return URLs to prevent open redirect attacks.</span>                RedirectUri <span class="token operator">=</span> Url<span class="token punctuation">.</span><span class="token function">IsLocalUrl</span><span class="token punctuation">(</span>returnUrl<span class="token punctuation">)</span> <span class="token punctuation">?</span> returnUrl <span class="token punctuation">:</span> <span class="token string">"/Home/Index"</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// Ask the OpenIddict client middleware to redirect the user agent to the identity provider.</span>            <span class="token keyword">return</span> <span class="token function">Challenge</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> OpenIddictClientAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/logout"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">ValidateAntiForgeryToken</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">LogOut</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> returnUrl<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// Retrieve the identity stored in the local authentication cookie. If it's not available,</span>            <span class="token comment">// this indicate that the user is already logged out locally (or has not logged in yet).</span>            <span class="token comment">//</span>            <span class="token comment">// For scenarios where the default authentication handler configured in the ASP.NET Core</span>            <span class="token comment">// authentication options shouldn't be used, a specific scheme can be specified here.</span>            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// Only allow local return URLs to prevent open redirect attacks.</span>                <span class="token keyword">return</span> <span class="token function">Redirect</span><span class="token punctuation">(</span>Url<span class="token punctuation">.</span><span class="token function">IsLocalUrl</span><span class="token punctuation">(</span>returnUrl<span class="token punctuation">)</span> <span class="token punctuation">?</span> returnUrl <span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Remove the local authentication cookie before triggering a redirection to the remote server.</span>            <span class="token comment">//</span>            <span class="token comment">// For scenarios where the default sign-out handler configured in the ASP.NET Core</span>            <span class="token comment">// authentication options shouldn't be used, a specific scheme can be specified here.</span>            <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignOutAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>            <span class="token punctuation">{</span>                <span class="token comment">// While not required, the specification encourages sending an id_token_hint</span>                <span class="token comment">// parameter containing an identity token returned by the server for this user.</span>                <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OpenIddictClientAspNetCoreConstants<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>IdentityTokenHint</span></span><span class="token punctuation">]</span> <span class="token operator">=</span>                    result<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span><span class="token function">GetTokenValue</span><span class="token punctuation">(</span>OpenIddictClientAspNetCoreConstants<span class="token punctuation">.</span>Tokens<span class="token punctuation">.</span>BackchannelIdentityToken<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// Only allow local return URLs to prevent open redirect attacks.</span>                RedirectUri <span class="token operator">=</span> Url<span class="token punctuation">.</span><span class="token function">IsLocalUrl</span><span class="token punctuation">(</span>returnUrl<span class="token punctuation">)</span> <span class="token punctuation">?</span> returnUrl <span class="token punctuation">:</span> <span class="token string">"/"</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// Ask the OpenIddict client middleware to redirect the user agent to the identity provider.</span>            <span class="token keyword">return</span> <span class="token function">SignOut</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> OpenIddictClientAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Note: this controller uses the same callback action for all providers</span>        <span class="token comment">// but for users who prefer using a different action per provider,</span>        <span class="token comment">// the following action can be split into separate actions.</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/callback/login"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/callback/login"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">IgnoreAntiforgeryToken</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">LogInCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// Retrieve the authorization data validated by OpenIddict as part of the callback handling.</span>            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>OpenIddictClientAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Multiple strategies exist to handle OAuth 2.0/OpenID Connect callbacks, each with their pros and cons:</span>            <span class="token comment">//</span>            <span class="token comment">//   * Directly using the tokens to perform the necessary action(s) on behalf of the user, which is suitable</span>            <span class="token comment">//     for applications that don't need a long-term access to the user's resources or don't want to store</span>            <span class="token comment">//     access/refresh tokens in a database or in an authentication cookie (which has security implications).</span>            <span class="token comment">//     It is also suitable for applications that don't need to authenticate users but only need to perform</span>            <span class="token comment">//     action(s) on their behalf by making API calls using the access token returned by the remote server.</span>            <span class="token comment">//</span>            <span class="token comment">//   * Storing the external claims/tokens in a database (and optionally keeping the essential claims in an</span>            <span class="token comment">//     authentication cookie so that cookie size limits are not hit). For the applications that use ASP.NET</span>            <span class="token comment">//     Core Identity, the UserManager.SetAuthenticationTokenAsync() API can be used to store external tokens.</span>            <span class="token comment">//</span>            <span class="token comment">//     Note: in this case, it's recommended to use column encryption to protect the tokens in the database.</span>            <span class="token comment">//</span>            <span class="token comment">//   * Storing the external claims/tokens in an authentication cookie, which doesn't require having</span>            <span class="token comment">//     a user database but may be affected by the cookie size limits enforced by most browser vendors</span>            <span class="token comment">//     (e.g Safari for macOS and Safari for iOS/iPadOS enforce a per-domain 4KB limit for all cookies).</span>            <span class="token comment">//</span>            <span class="token comment">//     Note: this is the approach used here, but the external claims are first filtered to only persist</span>            <span class="token comment">//     a few claims like the user identifier. The same approach is used to store the access/refresh tokens.</span>            <span class="token comment">// Important: if the remote server doesn't support OpenID Connect and doesn't expose a userinfo endpoint,</span>            <span class="token comment">// result.Principal.Identity will represent an unauthenticated identity and won't contain any claim.</span>            <span class="token comment">//</span>            <span class="token comment">// Such identities cannot be used as-is to build an authentication cookie in ASP.NET Core (as the</span>            <span class="token comment">// antiforgery stack requires at least a name claim to bind CSRF cookies to the user's identity) but</span>            <span class="token comment">// the access/refresh tokens can be retrieved using result.Properties.GetTokens() to make API calls.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Principal <span class="token keyword">is</span> <span class="token class-name">ClaimsPrincipal</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>Identity<span class="token punctuation">.</span>IsAuthenticated<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"The external authorization data cannot be used for authentication."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Build an identity based on the external claims and that will be used to create the authentication cookie.</span>            <span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>                <span class="token named-parameter punctuation">authenticationType</span><span class="token punctuation">:</span> TokenValidationParameters<span class="token punctuation">.</span>DefaultAuthenticationType<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">nameType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>                <span class="token named-parameter punctuation">roleType</span><span class="token punctuation">:</span> Claims<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// By default, OpenIddict will automatically try to map the email/name and name identifier claims from</span>            <span class="token comment">// their standard OpenID Connect or provider-specific equivalent, if available. If needed, additional</span>            <span class="token comment">// claims can be resolved from the external identity and copied to the final authentication cookie.</span>            identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span><span class="token function">GetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span><span class="token function">GetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span><span class="token function">GetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span><span class="token function">GetClaim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Preserve the registration identifier to be able to resolve it later.</span>            identity<span class="token punctuation">.</span><span class="token function">SetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Private<span class="token punctuation">.</span>RegistrationId<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span><span class="token function">GetClaim</span><span class="token punctuation">(</span>Claims<span class="token punctuation">.</span>Private<span class="token punctuation">.</span>RegistrationId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Build the authentication properties based on the properties that were added when the challenge was triggered.</span>            <span class="token class-name"><span class="token keyword">var</span></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Items<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                RedirectUri <span class="token operator">=</span> result<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>RedirectUri <span class="token operator">??</span> <span class="token string">"/"</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// If needed, the tokens returned by the authorization server can be stored in the authentication cookie.</span>            <span class="token comment">//</span>            <span class="token comment">// To make cookies less heavy, tokens that are not used are filtered out before creating the cookie.</span>            properties<span class="token punctuation">.</span><span class="token function">StoreTokens</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span><span class="token function">GetTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>token <span class="token operator">=&gt;</span> token<span class="token punctuation">.</span>Name <span class="token keyword">switch</span>            <span class="token punctuation">{</span>                <span class="token comment">// Preserve the access, identity and refresh tokens returned in the token response, if available.</span>                OpenIddictClientAspNetCoreConstants<span class="token punctuation">.</span>Tokens<span class="token punctuation">.</span>BackchannelAccessToken <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                OpenIddictClientAspNetCoreConstants<span class="token punctuation">.</span>Tokens<span class="token punctuation">.</span>BackchannelIdentityToken <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                OpenIddictClientAspNetCoreConstants<span class="token punctuation">.</span>Tokens<span class="token punctuation">.</span>RefreshToken <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// Ignore the other tokens.</span>                _ <span class="token operator">=&gt;</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Ask the default sign-in handler to return a new cookie and redirect the</span>            <span class="token comment">// user agent to the return URL stored in the authentication properties.</span>            <span class="token comment">//</span>            <span class="token comment">// For scenarios where the default sign-in handler configured in the ASP.NET Core</span>            <span class="token comment">// authentication options shouldn't be used, a specific scheme can be specified here.</span>            <span class="token comment">//return SignIn(new ClaimsPrincipal(identity), properties, CookieAuthenticationDefaults.AuthenticationScheme);</span>            <span class="token comment">//return SignIn(new ClaimsPrincipal(identity), properties, CookieAuthenticationDefaults.AuthenticationScheme);</span>            <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">Redirect</span><span class="token punctuation">(</span>result<span class="token operator">!</span><span class="token punctuation">.</span>Properties<span class="token operator">!</span><span class="token punctuation">.</span>RedirectUri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Note: this controller uses the same callback action for all providers</span>        <span class="token comment">// but for users who prefer using a different action per provider,</span>        <span class="token comment">// the following action can be split into separate actions.</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/callback/logout"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"~/callback/logout"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">IgnoreAntiforgeryToken</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">LogOutCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// Retrieve the data stored by OpenIddict in the state token created when the logout was triggered.</span>            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>OpenIddictClientAspNetCoreDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// In this sample, the local authentication cookie is always removed before the user agent is redirected</span>            <span class="token comment">// to the authorization server. Applications that prefer delaying the removal of the local cookie can</span>            <span class="token comment">// remove the corresponding code from the logout action and remove the authentication cookie in this action.</span>            <span class="token keyword">return</span> <span class="token function">Redirect</span><span class="token punctuation">(</span>result<span class="token operator">!</span><span class="token punctuation">.</span>Properties<span class="token operator">!</span><span class="token punctuation">.</span>RedirectUri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>LogIn</code> 方法只做了一件事，返回一个 <code>ChallengeResult</code>， 将请求重定向到用 <code>OpenIddictClientAspNetCoreDefaults.AuthenticationScheme</code> 身份认证方案进行登录， 此时会通过 <code>OpenIddict</code> 客户端中间件，向配置的身份认证服务器请求登录。</p><p> 用户在身份认证服务器提供的登录页面操作完成登录后，回调回来，调用 <code>LogInCallback</code> 方法，此方法会根据回调回来的登录凭证信息，生成 <code>ClaimsPrincipal</code> ，对 <code>Cookie</code> 身份认证方案进行SignIn操作，记录<code>Cookie</code> 身份认证方案的登录凭证。</p></li></ol><blockquote><p>整体流程就是用户访问客户端需要授权的接口， 除非 <code>Cookie</code> 身份验证中间件，从 <code>Cookie</code> 中获取登录凭证，如果没有，重定向到 <code>/login</code> 登录终结点，登录终结点再重定向到 <code>OpenIddict</code> 身份认证服务器中进行登录，登录完成后，<code>OpenIddict</code> 身份认证服务器回调 <code>/callback/login</code> 终结点，在 <code>/callback/login</code> 中将登录凭证保存到 <code>Cookie</code> 中。</p><p>注销的流程类似。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/openiddict/openiddict-core&quot;&gt;Openiddict&lt;/a&gt;开源的身份认证和授权库，可用它见OAuth 2.0/OpenID Connect功能集成到应用程序中。&lt;/p&gt;
&lt;blockquote</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://izanhzh.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="dotnet" scheme="https://izanhzh.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>NPM使用淘宝镜像加速</title>
    <link href="https://izanhzh.github.io/2023/12/12/4828fcdd/"/>
    <id>https://izanhzh.github.io/2023/12/12/4828fcdd/</id>
    <published>2023-12-12T00:34:32.000Z</published>
    <updated>2023-12-21T09:46:12.758Z</updated>
    
    <content type="html"><![CDATA[<ul><li>使用<code>npm config get registry</code>命令可以查看当前npm使用的下载源地址</li><li>npm默认使用源地址是：<a href="https://registry.npmjs.org/">https://registry.npmjs.org</a> <blockquote><p>国内访问这个地址太慢会导致<code>npm install</code>时，卡在sill idealTree buildDeps没有反应</p></blockquote></li><li>使用命令<code>npm config set registry https://registry.npm.taobao.org</code>切换为淘宝镜像源地址</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;npm config get registry&lt;/code&gt;命令可以查看当前npm使用的下载源地址&lt;/li&gt;
&lt;li&gt;npm默认使用源地址是：&lt;a href=&quot;https://registry.npmjs.org/&quot;&gt;https://regist</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://izanhzh.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="nodejs" scheme="https://izanhzh.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Git的HTTPS和SSH</title>
    <link href="https://izanhzh.github.io/2023/12/11/256d890f/"/>
    <id>https://izanhzh.github.io/2023/12/11/256d890f/</id>
    <published>2023-12-11T09:24:49.000Z</published>
    <updated>2023-12-21T09:41:20.721Z</updated>
    
    <content type="html"><![CDATA[<p>Git一般会使用HTTPS和SSH这两种协议来进行本地库和远程库之间的操作。</p><h2 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h2><p>这种默认每次创建新连接都会要求输入远程库的账户密码，如果不想要每次都输入，可以通过<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8">Git凭证存储配置</a>避免每次都输入</p><p>通过修改全局配置文件进行设置，操作命令：<code>git config --global credential.helper [options]</code></p><table><thead><tr><th>options</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td></td><td>默认所有都不缓存。 每一次连接都会询问你的用户名和密码</td><td></td></tr><tr><td>cache</td><td>此模式会将凭证存放在内存中一段时间。 密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除</td><td></td></tr><tr><td>store</td><td>此模式会将凭证用明文的形式存放在磁盘中，并且永不过期。 这意味着除非你修改了你在 Git 服务器上的密码，否则你永远不需要再次输入你的凭证信息。 这种方式的缺点是你的密码是用明文的方式存放在你的 home 目录下</td><td></td></tr><tr><td>osxkeychain</td><td>此模式会将凭证缓存到你系统用户的钥匙串中。 这种方式将凭证存放在磁盘中，并且永不过期，但是是被加密的，这种加密方式与存放 HTTPS 凭证以及 Safari 的自动填写是相同的</td><td>仅Mac系统可用</td></tr><tr><td>manager</td><td>此模式会将凭证记录到系统的凭证管理中，可以通过<code>控制面板 → 用户账户 → 凭据管理 → windows凭据</code>进行查看编辑删除</td><td>仅Windows系统可用</td></tr></tbody></table><blockquote><p>一般是修改全局配置文件进行设置， 除了修改用户全局配置文件外，也可以通过修改其他配置文件实现</p><table><thead><tr><th>配置文件级别</th><th>优先级</th><th>文件路径</th></tr></thead><tbody><tr><td>本地</td><td>最高</td><td>代码当前目录下的<code>.git/config</code></td></tr><tr><td>全局</td><td>次于本地</td><td>通过命令<code>git config --global --list --show-origin</code>查看</td></tr><tr><td>系统</td><td>最低</td><td>通过命令<code>git config --system --list --show-origin</code>查看</td></tr></tbody></table></blockquote><blockquote><p>注意：Github自2021年8月13日开始，不再使用密码进行登录，而是改用私人令牌<br><a href="https://github.blog/changelog/2021-08-12-git-password-authentication-is-shutting-down/">https://github.blog/changelog/2021-08-12-git-password-authentication-is-shutting-down/</a></p><p>当用HTTPS操作Github的远程库时，如果要输入密码，输入的不是Github账户的密码，而是在Github上配置的私人令牌</p><p>Github配置私人令牌：<code>点击Github右上角个人头像 → settings → Developer settings → Tokens(classic)</code></p></blockquote><h2 id="SSH模式"><a href="#SSH模式" class="headerlink" title="SSH模式"></a>SSH模式</h2><p>这种需要先在本地生成SSH公钥和私钥，并将公钥配置到远程库中，配置好后，如果设置了一个没有口令的密钥，就可以在不输入用户名和密码的情况下安全地传输数据。</p><p>Git使用RSA算法生成密钥命令：<code>ssh-keygen -t rsa -b 4096 -C "your_email@example.com"</code></p><blockquote><p>默认情况下，用户的 SSH 密钥存储在其 ~/.ssh 目录下</p></blockquote><p>Github推荐用ed25519算法生成密钥命令：<code>ssh-keygen -t ed25519 -C "your_email@example.com"</code></p><blockquote><p><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p><p>注意：GitHub 通过在 2022 年 3 月 15 日删除旧的、不安全的密钥类型来提高安全性。</p><p>自该日期起，不再支持 DSA 密钥 (ssh-dss)。 无法在 GitHub.com上向个人帐户添加新的 DSA 密钥。</p><p>2021 年 11 月 2 日之前带有 valid_after 的 RSA 密钥 (ssh-rsa) 可以继续使用任何签名算法。 在该日期之后生成的 RSA 密钥必须使用 SHA-2 签名算法。 一些较旧的客户端可能需要升级才能使用 SHA-2 签名。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git一般会使用HTTPS和SSH这两种协议来进行本地库和远程库之间的操作。&lt;/p&gt;
&lt;h2 id=&quot;HTTPS协议&quot;&gt;&lt;a href=&quot;#HTTPS协议&quot; class=&quot;headerlink&quot; title=&quot;HTTPS协议&quot;&gt;&lt;/a&gt;HTTPS协议&lt;/h2&gt;&lt;p&gt;这种默认</summary>
      
    
    
    
    
    <category term="git" scheme="https://izanhzh.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git修改已提交记录的作者信息</title>
    <link href="https://izanhzh.github.io/2023/12/11/c44ec6ab/"/>
    <id>https://izanhzh.github.io/2023/12/11/c44ec6ab/</id>
    <published>2023-12-11T07:39:28.000Z</published>
    <updated>2023-12-21T09:47:48.303Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：<a href="https://www.cnblogs.com/fangsmile/p/17477340.html">https://www.cnblogs.com/fangsmile/p/17477340.html</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> filter-branch --env-filter <span class="token string">' OLD_EMAIL="old-email@example.com" CORRECT_NAME="New Author Name" CORRECT_EMAIL="new-email@example.com" if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ] then    export GIT_COMMITTER_NAME="$CORRECT_NAME"    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"    fi if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ] then    export GIT_AUTHOR_NAME="$CORRECT_NAME"    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL" fi '</span> --tag-name-filter <span class="token function">cat</span> -- <span class="token parameter variable">--branches</span> <span class="token parameter variable">--tags</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果提示已经存在:</p><pre class="line-numbers language-none"><code class="language-none">Proceeding with filter-branch...Cannot create a new backup.A previous backup already exists in refs/original/Force overwriting the backup with -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按要求添加强制’-f’改为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> filter-branch <span class="token parameter variable">-f</span> --env-filter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后使用以下命令强制推送修改后的提交记录到远程仓库（这个命令会将修改后的提交记录推送到所有分支和标签）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">--force</span> <span class="token parameter variable">--tags</span> origin <span class="token string">'refs/heads/*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料：&lt;a href=&quot;https://www.cnblogs.com/fangsmile/p/17477340.html&quot;&gt;https://www.cnblogs.com/fangsmile/p/17477340.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;li</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://izanhzh.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="git" scheme="https://izanhzh.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>对.net core认证授权的一些理解</title>
    <link href="https://izanhzh.github.io/2023/12/09/23ec4165/"/>
    <id>https://izanhzh.github.io/2023/12/09/23ec4165/</id>
    <published>2023-12-09T08:32:32.000Z</published>
    <updated>2023-12-21T09:41:20.707Z</updated>
    
    <content type="html"><![CDATA[<p>认证（Authentication）和授权（Authorization）是两个不同的动作</p><ul><li>认证主要判断请求是由谁发出的，确认请求用户的信息（<a href="https://www.cnblogs.com/AJun816/p/16152568.html#claims%E8%AF%81%E4%BB%B6%E5%8D%95%E5%85%83">Claims</a>，类似身份证信息的概念）</li><li>授权是在认证的基础上，根据认证获取到的用户的信息，判断用户是否有其请求资源的操作权限</li></ul><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><ol><li><code>services.AddAuthentication()</code>, <code>app.UseAuthentication()</code>配置使用认证中间件</li><li>添加认证中间件时，可以设置多种不同的认证方案(Scheme)</li><li>常见的一些认证方案&amp;自定义<ul><li>CookieAuthenticationDefaults.AuthenticationScheme   <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>JwtBearerDefaults.AuthenticationScheme   <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>IdentityConstants.ApplicationScheme   <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddIdentity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IdentityUser<span class="token punctuation">,</span> IdentityRole<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>   <a href="https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityServiceCollectionExtensions.cs">AddIdentity里面做了一个如下的操作</a>   <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>ApplicationScheme<span class="token punctuation">;</span>    options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>ApplicationScheme<span class="token punctuation">;</span>    options<span class="token punctuation">.</span>DefaultSignInScheme <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>ExternalScheme<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><a href="https://zhuanlan.zhihu.com/p/636433010">自定义认证方案</a>  <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token string">"CustomAuth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者</span>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> <span class="token string">"CustomAuth"</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> <span class="token string">"CustomAuth"</span><span class="token punctuation">;</span><span class="token comment">//也可以指定成其他的，不一定要和DefaultAuthenticateScheme一样</span>    options<span class="token punctuation">.</span>DefaultSignInScheme <span class="token operator">=</span> <span class="token string">"CustomAuth"</span><span class="token punctuation">;</span><span class="token comment">//也可以指定成其他的，不一定要和DefaultAuthenticateScheme一样</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>只设置认证方案是不够的，还需要对认证方案指定验证逻辑（AuthenticationHandler）</li><li>常见的一些认证方案指定验证逻辑<ul><li>CookieAuthenticationDefaults.AuthenticationScheme -&gt; CookieAuthenticationHandler   <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/Cookies/src/CookieExtensions.cs</span>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>options<span class="token operator">=&gt;</span><span class="token punctuation">{</span>xxx<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>JwtBearerDefaults.AuthenticationScheme -&gt; JwtBearerHandler   <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/JwtBearer/src/JwtBearerExtensions.cs</span>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>options<span class="token operator">=&gt;</span><span class="token punctuation">{</span>xxx<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>IdentityConstants.ApplicationScheme -&gt; CookieAuthenticationHandler (阅读理解services.AddIdentity源码)     <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>ApplicationScheme<span class="token punctuation">;</span>    options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>ApplicationScheme<span class="token punctuation">;</span>    options<span class="token punctuation">.</span>DefaultSignInScheme <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>ExternalScheme<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//对IdentityConstants.ApplicationScheme认证方案指定CookieAuthenticationHandler</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>IdentityConstants<span class="token punctuation">.</span>ApplicationScheme<span class="token punctuation">,</span> o <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    o<span class="token punctuation">.</span>LoginPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PathString</span><span class="token punctuation">(</span><span class="token string">"/Account/Login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CookieAuthenticationEvents</span>    <span class="token punctuation">{</span>        OnValidatePrincipal <span class="token operator">=</span> SecurityStampValidator<span class="token punctuation">.</span>ValidatePrincipalAsync    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//对IdentityConstants.ExternalScheme认证方案指定CookieAuthenticationHandler</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>IdentityConstants<span class="token punctuation">.</span>ExternalScheme<span class="token punctuation">,</span> o <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    o<span class="token punctuation">.</span>Cookie<span class="token punctuation">.</span>Name <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>ExternalScheme<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>ExpireTimeSpan <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//对IdentityConstants.TwoFactorRememberMeScheme认证方案指定CookieAuthenticationHandler</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>IdentityConstants<span class="token punctuation">.</span>TwoFactorRememberMeScheme<span class="token punctuation">,</span> o <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    o<span class="token punctuation">.</span>Cookie<span class="token punctuation">.</span>Name <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>TwoFactorRememberMeScheme<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CookieAuthenticationEvents</span>    <span class="token punctuation">{</span>        OnValidatePrincipal <span class="token operator">=</span> SecurityStampValidator<span class="token punctuation">.</span>ValidateAsync<span class="token operator">&lt;</span>ITwoFactorSecurityStampValidator<span class="token operator">&gt;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//对IdentityConstants.TwoFactorUserIdScheme认证方案指定CookieAuthenticationHandler</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>IdentityConstants<span class="token punctuation">.</span>TwoFactorUserIdScheme<span class="token punctuation">,</span> o <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    o<span class="token punctuation">.</span>Cookie<span class="token punctuation">.</span>Name <span class="token operator">=</span> IdentityConstants<span class="token punctuation">.</span>TwoFactorUserIdScheme<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CookieAuthenticationEvents</span>    <span class="token punctuation">{</span>        OnRedirectToReturnUrl <span class="token operator">=</span> _ <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span>CompletedTask    <span class="token punctuation">}</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span>ExpireTimeSpan <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>自定义认证方案<ul><li>定义一个类继承AuthenticationHandler，重写HandleAuthenticateAsync方法</li><li>定义一个类继承AuthenticationSchemeOptions</li><li>定义一个AuthenticationBuilder的扩展方法，例如：<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AuthenticationBuilder</span> <span class="token function">AddCustomAuth</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">AuthenticationBuilder</span> builder<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>CustomAuthenticationOptions<span class="token punctuation">&gt;</span></span> configureOptions<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScheme</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomAuthenticationOptions<span class="token punctuation">,</span> CustomAuthenticationHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"CustomAuth"</span><span class="token punctuation">,</span> configureOptions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>指定验证逻辑<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token string">"CustomAuth"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCustomAuth</span><span class="token punctuation">(</span>options<span class="token operator">=&gt;</span><span class="token punctuation">{</span>xxx<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li>认证方案和验证逻辑是可以任意组合绑定的，例如：<code>CookieAuthenticationDefaults.AuthenticationScheme</code>、<code>IdentityConstants.ApplicationScheme</code>，都会指定用<code>CookieAuthenticationHandler</code></li></ol><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><ol><li>要在<code>app.UseAuthentication()</code>代码之后添加<code>app.UseAuthorization()</code>使用授权中间件</li><li>使用<code>AuthorizeAttribute</code>特性标记控制器类或方法需要的权限<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span><span class="token comment">//不指定认证方案，会按默认的认证方案处理</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AuthenticationSchemes<span class="token operator">=</span><span class="token string">"CustomAuth"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//指定用特定的认证方案</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"AtLeast21"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//基于Policy授权</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Policy<span class="token operator">=</span><span class="token string">"AtLeast21"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//基于Policy授权</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Roles<span class="token operator">=</span><span class="token string">"Admin"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//基于角色授权</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>直接对终结点设置需要的权限 <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token class-name"><span class="token keyword">var</span></span> pipeline <span class="token operator">=</span> endpoints<span class="token punctuation">.</span><span class="token function">CreateApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> swaggerAuthAttr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthorizeAttribute</span><span class="token punctuation">(</span><span class="token string">"swagger-permission"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    endpoints<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">"/swagger/{documentName}/swagger.json"</span><span class="token punctuation">,</span> pipeline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireAuthorization</span><span class="token punctuation">(</span>swaggerAuthAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    endpoints<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">"/swagger/index.html"</span><span class="token punctuation">,</span> pipeline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireAuthorization</span><span class="token punctuation">(</span>swaggerAuthAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    endpoints<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">"/myswagger/{documentName}/swagger.json"</span><span class="token punctuation">,</span> pipeline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireAuthorization</span><span class="token punctuation">(</span>swaggerAuthAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    endpoints<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">"/myswagger/index.html"</span><span class="token punctuation">,</span> pipeline<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireAuthorization</span><span class="token punctuation">(</span>swaggerAuthAttr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><a href="https://learn.microsoft.com/zh-cn/aspnet/core/security/authorization/policies?view=aspnetcore-8.0">基于Policy授权</a></li><li><a href="https://learn.microsoft.com/zh-cn/aspnet/core/security/authorization/roles?view=aspnetcore-8.0">基于角色授权</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;认证（Authentication）和授权（Authorization）是两个不同的动作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认证主要判断请求是由谁发出的，确认请求用户的信息（&lt;a href=&quot;https://www.cnblogs.com/AJun816/p/16152568.ht</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://izanhzh.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://izanhzh.github.io/2023/12/09/4a17b156/"/>
    <id>https://izanhzh.github.io/2023/12/09/4a17b156/</id>
    <published>2023-12-09T02:00:00.000Z</published>
    <updated>2023-12-21T09:47:02.776Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
